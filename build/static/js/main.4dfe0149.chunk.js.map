{"version":3,"sources":["component/todo/content.todo.js","component/todo/index.todo.js","App.js","serviceWorker.js","index.js"],"names":["Option","Select","confirm","Modal","Search","Input","Content","layout","labelCol","span","wrapperCol","useState","openEdit","setOpenEdit","actionEdit","setActionEdit","titleEdit","setTitleEdit","dataLocal","setDataLocal","filterTable","dataEdit","setDataEdit","valueFilter","useEffect","JSON","parse","reactLocalStorage","get","fnOpenEdit","val","saveLocal","data","setObject","Header","className","title","placeholder","onSearch","value","style","width","allowClear","extra","key","type","icon","PlusOutlined","onClick","Edit","Form","useForm","form","console","log","setFieldsValue","time","moment","level","name","status","resetFields","visible","onOk","validateFields","then","values","valueOf","_dataLocal","newArray","map","item","onCreate","catch","message","error","onCancel","Item","label","rules","required","format","columns","render","text","record","indexOf","dataIndex","margin","ClockCircleOutlined","sorter","a","b","unix","sortDirections","length","color","align","size","ghost","FormOutlined","danger","DeleteOutlined","ExclamationCircleOutlined","content","filter","dataSource","Layout","Footer","Todo","padding","textAlign","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4dfe0149.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Table, Tag, Space, PageHeader, Button, Tooltip, Input, Modal, TimePicker, Form, Select, message } from 'antd';\r\nimport { PlusOutlined, SearchOutlined, FormOutlined, DeleteOutlined, ClockCircleOutlined, ExclamationCircleOutlined } from '@ant-design/icons';\r\nimport moment from 'moment';\r\nimport { reactLocalStorage } from 'reactjs-localstorage';\r\nimport './style.todo.css';\r\n\r\nconst { Option } = Select;\r\nconst { confirm } = Modal;\r\nconst { Search } = Input;\r\nconst format = 'HH:mm';\r\n\r\nconst Content = () => {\r\n\r\n    const layout = {\r\n        labelCol: { span: 6 },\r\n        wrapperCol: { span: 16 },\r\n    };\r\n\r\n    const [openEdit, setOpenEdit] = useState(false);\r\n    const [actionEdit, setActionEdit] = useState('Add');\r\n    const [titleEdit, setTitleEdit] = useState('Add a todo');\r\n    const [dataLocal, setDataLocal] = useState([]);\r\n    const [filterTable, setFilterTable] = useState(null);\r\n    const [dataEdit, setDataEdit] = useState({});\r\n    const [valueFilter, setValueFilter] = useState(\"\");\r\n\r\n    useEffect(() => {\r\n        setDataLocal(JSON.parse(reactLocalStorage.get('todo_lists')) || []);\r\n    }, [])\r\n\r\n    // function edit\r\n    const fnOpenEdit = (val) => {\r\n        setOpenEdit(val);\r\n        if (actionEdit === 'Add') setTitleEdit('Add a todo')\r\n        else setTitleEdit('Edit todo list')\r\n    }\r\n\r\n    // function create\r\n    const onCreate = (values) => {\r\n        if (actionEdit === 'Add') {\r\n            const key = moment().valueOf();\r\n            const _values = { ...values, key };\r\n            const _dataLocal = [_values, ...dataLocal];\r\n            setDataLocal(_dataLocal);\r\n            saveLocal(_dataLocal);\r\n        }\r\n        else {\r\n            const newArray = dataLocal.map((item) => {\r\n                if (item.key === dataEdit.key) {\r\n                    return { key: item.key, ...values };\r\n                } else {\r\n                    return item;\r\n                }\r\n            });\r\n            setDataLocal(newArray);\r\n            saveLocal(newArray);\r\n            // console.log(newArray);\r\n        }\r\n    }\r\n\r\n    // hàm lưu dữ liệu vào local tham số truyền vào là  data\r\n    const saveLocal = (data) => {\r\n        reactLocalStorage.setObject('todo_lists', data);\r\n    }\r\n\r\n    const onSearch = value => {\r\n        // const _filterTable = dataLocal.filter(o =>\r\n        //     Object.keys(o).some(k =>\r\n        //         String(o[k])\r\n        //             .toLowerCase()\r\n        //             .includes(value.toLowerCase())\r\n        //     )\r\n        // );\r\n        // setFilterTable(_filterTable);\r\n    };\r\n\r\n     // function header\r\n     const Header = () => (\r\n        <PageHeader\r\n            className=\"header-table\"\r\n            title={\r\n                <Search\r\n                    // value={valueFilter}\r\n                    placeholder=\"Search in todo list\"\r\n                    onSearch={value =>  onSearch(value) }\r\n                    // onChange={e => setValueFilter(e.target.value)}\r\n                    style={{ width: 360 }}\r\n                    allowClear={true}\r\n                />\r\n            }\r\n            extra={[\r\n                <Tooltip title=\"Click here to add a new todo\" key=\"1\" >\r\n                    <Button type=\"primary\" icon={<PlusOutlined />}\r\n                        onClick={() => {\r\n                            fnOpenEdit(true);\r\n                            setActionEdit('Add');\r\n                        }}>\r\n                        Add new todo\r\n                </Button>\r\n                </Tooltip>\r\n            ]}\r\n        />)\r\n\r\n\r\n    const Edit = () => {\r\n        const [form] = Form.useForm();\r\n\r\n        useEffect(() => {\r\n            if (actionEdit === \"Edit\" && openEdit === true) {\r\n                console.log(dataEdit);\r\n                form.setFieldsValue({\r\n                    time: moment(dataEdit.time, format),\r\n                    key: dataEdit.key,\r\n                    level: dataEdit.level,\r\n                    name: dataEdit.name,\r\n                    status: dataEdit.status\r\n                });\r\n            } else {\r\n                form.resetFields();\r\n            }\r\n        }, [openEdit, actionEdit, dataEdit])\r\n\r\n        return (\r\n            <Modal\r\n                title={titleEdit}\r\n                visible={openEdit}\r\n                onOk={() => {\r\n                    form\r\n                        .validateFields()\r\n                        .then(values => {\r\n                            form.resetFields();\r\n                            onCreate(values);\r\n                            fnOpenEdit(false);\r\n                        })\r\n                        .catch(() => {\r\n                            message.error('Please input your Fields:');\r\n                        });\r\n                }}\r\n                onCancel={() => {\r\n                    fnOpenEdit(false)\r\n                }}\r\n            >\r\n                <Form\r\n                    form={form}\r\n                    {...layout}\r\n                >\r\n                    <Form.Item\r\n                        label=\"Time\"\r\n                        name=\"time\"\r\n                        rules={[{ required: true, message: 'Please select your time !' }]}\r\n                    >\r\n                        <TimePicker format={format} />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Name\"\r\n                        name=\"name\"\r\n                        rules={[{ required: true, message: 'Please input your name!' }]}\r\n                    >\r\n                        <Input />\r\n                    </Form.Item>\r\n\r\n                    <Form.Item\r\n                        label=\"Level\"\r\n                        name=\"level\"\r\n                        rules={[{ required: true, message: 'Please input your level!' }]}\r\n                    >\r\n                        <Select>\r\n                            <Option value=\"low\">Low</Option>\r\n                            <Option value=\"medium\">Medium</Option>\r\n                            <Option value=\"high\">High</Option>\r\n                        </Select>\r\n                    </Form.Item>\r\n                    <Form.Item\r\n                        label=\"Status\"\r\n                        name=\"status\"\r\n                        rules={[{ required: true, message: 'Please input your status!' }]}\r\n                    >\r\n                        <Select>\r\n                            <Option value=\"notDone\">Not done</Option>\r\n                            <Option value=\"done\">Done</Option>\r\n                        </Select>\r\n\r\n                    </Form.Item>\r\n                </Form>\r\n            </Modal>\r\n        )\r\n    }\r\n\r\n    // function delete\r\n    const onDelete = (key) => {\r\n        confirm({\r\n            icon: <ExclamationCircleOutlined />,\r\n            content: <label>Bạn có chắc xóa dữ liệu này không?</label>,\r\n            onOk() {\r\n                const newArray = dataLocal.filter(item => item.key !== key);\r\n                setDataLocal(newArray);\r\n                saveLocal(newArray);\r\n            },\r\n        });\r\n    };   \r\n\r\n    const columns = [\r\n        {\r\n            title: '#',\r\n            width: 35,\r\n            render: (text, record) => (dataLocal.indexOf(record) + 1),\r\n        },\r\n        {\r\n            title: 'Time',\r\n            dataIndex: 'time',\r\n            width: 120,\r\n            key: 'time',\r\n            render: (text) => (\r\n                <p style={{ margin: \"0px\" }}><ClockCircleOutlined /> {moment(text).format(\"HH:mm\")}</p>\r\n            ),\r\n            sorter: (a, b) => moment(a.time).unix() - moment(b.time).unix(),\r\n            sortDirections: ['descend', 'ascend'],\r\n        },\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n            render: text => <b>{text}</b>,\r\n            sorter: (a, b) => a.name.length - b.name.length,\r\n            sortDirections: ['descend', 'ascend'],\r\n        },\r\n        {\r\n            title: 'Level',\r\n            width: 50,\r\n            dataIndex: 'level',\r\n            key: 'level',\r\n            render: text => (\r\n                <>\r\n                    {text === \"high\" && <Tag color=\"warning\">High</Tag>}\r\n                    {text === \"medium\" && <Tag color=\"processing\">Medium</Tag>}\r\n                    {text === \"low\" && <Tag color=\"default\">Low</Tag>}\r\n                </>\r\n            )\r\n        },\r\n        {\r\n            title: 'Status',\r\n            key: 'status',\r\n            width: 35,\r\n            dataIndex: 'status',\r\n            render: text => (\r\n                <>\r\n                    {text === \"notDone\" && <Tag color=\"error\">Not done</Tag>}\r\n                    {text === \"done\" && <Tag color=\"success\">Done</Tag>}\r\n                </>\r\n            )\r\n        },\r\n        {\r\n            title: 'Action',\r\n            key: 'action',\r\n            width: 120,\r\n            align: 'center',\r\n            render: (text, record) => (\r\n                <Space size=\"middle\">\r\n                    <Button type=\"primary\" ghost size=\"small\" icon={<FormOutlined />}\r\n                        onClick={() => {\r\n                            fnOpenEdit(true);\r\n                            setActionEdit('Edit');\r\n                            setDataEdit(record);\r\n                        }}\r\n                    >Edit</Button>\r\n                    <Button size=\"small\" danger icon={<DeleteOutlined />}\r\n                        onClick={() => onDelete(record.key)}\r\n                    >Delete</Button>\r\n                </Space>\r\n            ),\r\n        },\r\n    ];\r\n\r\n    return (\r\n        <div>\r\n            <Table\r\n                columns={columns}\r\n                dataSource={valueFilter === \"\" ? dataLocal : filterTable}\r\n                dataSource={dataLocal}\r\n                bordered={true}\r\n                title={() => <Header />}\r\n            />\r\n            <Edit />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Content;","import React from 'react';\r\nimport { Layout, Breadcrumb  } from 'antd';\r\nimport ContentTodo from './content.todo';\r\nimport './style.todo.css';\r\n\r\nconst { Header, Content, Footer } = Layout;\r\n\r\nconst Todo = () => {\r\n    return (\r\n        <Layout className=\"layout\">\r\n            <Header className=\"header-app\">\r\n                <h1>Đồ án tốt nghiệp - Ứng dụng tạo một App TodoList</h1>\r\n            </Header>\r\n            <Content style={{ padding: '0 50px' }}>\r\n                <Breadcrumb style={{ margin: '16px 0' }}>\r\n                    <Breadcrumb.Item>Home</Breadcrumb.Item>\r\n                    <Breadcrumb.Item>List</Breadcrumb.Item>\r\n                    <Breadcrumb.Item>Todo List</Breadcrumb.Item>\r\n                </Breadcrumb>\r\n                <div className=\"site-layout-content\">\r\n                    <ContentTodo />\r\n                </div>\r\n            </Content>\r\n            <Footer style={{ textAlign: 'center' }}>Họ và tên: ..........- Lớp: ........</Footer>\r\n        </Layout>\r\n    );\r\n};\r\n\r\nexport default Todo;","import React from 'react';\n// import logo from './logo.svg';\nimport Todo from './component/todo/index.todo';\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n  //   <App />\n  // </React.StrictMode>,\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}